diff --git a/list.cpp b/list.cpp
index 13f14cc..a906deb 100644
--- a/list.cpp
+++ b/list.cpp
@@ -4,23 +4,25 @@
 #include <stdlib.h>
 #include <string.h>
 
-#if defined (USE_MUTEX)
-#  define rd_lock(lock) pthread_mutex_lock(lock)
-#  define rd_unlock(lock) pthread_mutex_unlock(lock)
-#  define wr_lock(lock) pthread_mutex_lock(lock)
-#  define wr_unlock(lock) pthread_mutex_unlock(lock)
-#elif defined (USE_RWLOCK)
-#  define rd_lock(lock) // TODO
-#  define rd_unlock(lock) // TODO
-#  define wr_lock(lock) // TODO
-#  define wr_unlock(lock) // TODO
-#elif defined (USE_RCU)
-#  define rd_lock(lock) // TODO
-#  define rd_unlock(lock) // TODO
-#  define wr_lock(lock) // TODO
-#  define wr_unlock(lock) //TODO
+pthread_rwlockattr_t rwlock_attr;
+
+#if defined(USE_MUTEX)
+#define rd_lock(lock) pthread_mutex_lock(lock)
+#define rd_unlock(lock) pthread_mutex_unlock(lock)
+#define wr_lock(lock) pthread_mutex_lock(lock)
+#define wr_unlock(lock) pthread_mutex_unlock(lock)
+#elif defined(USE_RWLOCK)
+#define rd_lock(lock) pthread_rwlock_rdlock(lock)
+#define rd_unlock(lock) pthread_rwlock_unlock(lock)
+#define wr_lock(lock) pthread_rwlock_wrlock(lock)
+#define wr_unlock(lock) pthread_rwlock_unlock(lock)
+#elif defined(USE_RCU)
+#define rd_lock(lock) rcu_read_lock()
+#define rd_unlock(lock) rcu_read_unlock()
+#define wr_lock(lock) rcu_write_lock()
+#define wr_unlock(lock) rcu_write_unlock()
 #else
-#  error "No lock type defined"
+#error "No lock type defined"
 #endif
 
 #ifdef DEBUG
@@ -31,140 +33,181 @@
 
 unsigned calc_checksum(const char *str)
 {
-    unsigned sum = 0;
-    while (*str)
-        sum += *str++;
-    return sum;
+   unsigned sum = 0;
+   while (*str)
+      sum += *str++;
+   return sum;
 }
 
 void esw_list_init(LIST_TYPE *list)
 {
-#if defined (USE_MUTEX)
-    CHECK(pthread_mutex_init(&list->lock, NULL));
-    list->head = NULL;
-#elif defined (USE_RWLOCK)
-    // TODO
-#elif defined (USE_RCU)
-    // TODO
+#if defined(USE_MUTEX)
+   CHECK(pthread_mutex_init(&list->lock, NULL));
+   list->head = NULL;
+#elif defined(USE_RWLOCK)
+   pthread_rwlockattr_init(&rwlock_attr);
+   pthread_rwlockattr_setkind_np(&rwlock_attr,
+                                 PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);
+   pthread_rwlock_init(&list->lock, &rwlock_attr);
+#elif defined(USE_RCU)
+   CDS_INIT_LIST_HEAD(list);
 #else
 #error "No lock type defined"
 #endif
 }
 
-void esw_list_push(LIST_TYPE *list, const char *const key, const char *const value)
+void esw_list_push(LIST_TYPE *list, const char *const key,
+                   const char *const value)
 {
-    assert(list);
-    assert(key);
-    assert(value);
-
-    debug_printf("Pushing %s: %s\n", key, value);
-
-    esw_node_t *node = esw_list_create_node(key, value);
-#if defined (USE_MUTEX) || defined (USE_RWLOCK)
-    wr_lock(&list->lock);
-    node->next = list->head;
-    list->head = node;
-    wr_unlock(&list->lock);
-#elif defined (USE_RCU)
-    // TODO
+   assert(list);
+   assert(key);
+   assert(value);
+
+   debug_printf("Pushing %s: %s\n", key, value);
+
+   esw_node_t *node = esw_list_create_node(key, value);
+#if defined(USE_MUTEX) || defined(USE_RWLOCK)
+   wr_lock(&list->lock);
+   node->next = list->head;
+   list->head = node;
+   wr_unlock(&list->lock);
+#elif defined(USE_RCU)
+   cds_list_add_rcu(&node->node, list);
 #endif
 }
 
-void esw_list_update(LIST_TYPE *list, const char *const key, const char *const value)
+void esw_list_update(LIST_TYPE *list, const char *const key,
+                     const char *const value)
 {
-    assert(list);
-
-    /* Replaces first occurrence in the list */
-#if defined (USE_MUTEX) || defined (USE_RWLOCK)
-    wr_lock(&list->lock);
-    esw_node_t *current = list->head;
-    while (current != NULL) {
-        if (strcmp(current->key, key) == 0) {
-            char *new_value = strdup(value);
-            debug_printf("Updating %s: %s -> %s\n", key, current->value, new_value);
-            free(current->value);
-            current->value = new_value;
-            current->checksum = calc_checksum(new_value);
-            break;
-        }
-        current = current->next;
-    }
-    wr_unlock(&list->lock);
-#elif defined (USE_RCU)
-    // TODO
+   assert(list);
+
+   /* Replaces first occurrence in the list */
+#if defined(USE_MUTEX) || defined(USE_RWLOCK)
+   wr_lock(&list->lock);
+   esw_node_t *current = list->head;
+   while (current != NULL) {
+      if (strcmp(current->key, key) == 0) {
+         char *new_value = strdup(value);
+         debug_printf("Updating %s: %s -> %s\n", key, current->value,
+                      new_value);
+         free(current->value);
+         current->value = new_value;
+         current->checksum = calc_checksum(new_value);
+         break;
+      }
+      current = current->next;
+   }
+   wr_unlock(&list->lock);
+#elif defined(USE_RCU)
+   esw_node_t *new_node = esw_list_create_node(key, value);
+   struct cds_list_head *curr, *tmp;
+   cds_list_for_each_safe(curr, tmp, list)
+   {
+      esw_node_t *node = cds_list_entry(curr, esw_node_t, node);
+      if (strcmp(node->key, key) == 0) {
+         cds_list_replace_rcu(curr, &new_node->node);
+         synchronize_rcu();
+         esw_list_free_node(node);
+         break;
+      }
+   }
 #endif
 }
 
-bool esw_list_find(LIST_TYPE *list, const char *const key, char *value, const size_t max_len)
+bool esw_list_find(LIST_TYPE *list, const char *const key, char *value,
+                   const size_t max_len)
 {
-    bool found = false;
-    assert(list);
-    assert(key);
-
-    rd_lock(&list->lock);
-#if defined (USE_MUTEX) || defined (USE_RWLOCK)
-    esw_node_t *current = list->head;
-    while (current != NULL) {
-        if (strcmp(current->key, key) == 0) {
-            if (strlen(current->value) < max_len) {
-                strcpy(value, current->value);
-                if (calc_checksum(value) != current->checksum)
-                    errx(1, "%s:%d wrong checksum", __FILE__, __LINE__);
-            } else {
-                strncpy(value, current->value, max_len - 1);
-                value[max_len - 1] = '\0';
-                if (calc_checksum(value) != current->checksum)
-                    errx(1, "%s:%d wrong checksum", __FILE__, __LINE__);
-            }
-            found = true;
-            break;
-        }
-        current = current->next;
-    }
-#elif defined (USE_RCU)
-    // TODO
+   bool found = false;
+   assert(list);
+   assert(key);
+
+   rd_lock(&list->lock);
+#if defined(USE_MUTEX) || defined(USE_RWLOCK)
+   esw_node_t *current = list->head;
+   while (current != NULL) {
+      if (strcmp(current->key, key) == 0) {
+         if (strlen(current->value) < max_len) {
+            strcpy(value, current->value);
+            if (calc_checksum(value) != current->checksum)
+               errx(1, "%s:%d wrong checksum", __FILE__, __LINE__);
+         } else {
+            strncpy(value, current->value, max_len - 1);
+            value[max_len - 1] = '\0';
+            if (calc_checksum(value) != current->checksum)
+               errx(1, "%s:%d wrong checksum", __FILE__, __LINE__);
+         }
+         found = true;
+         break;
+      }
+      current = current->next;
+   }
+#elif defined(USE_RCU)
+   esw_node_t *node;
+   cds_list_for_each_entry_rcu(node, list, node)
+   {
+      if (strcmp(node->key, key) == 0) {
+         if (strlen(node->value) < max_len) {
+            strcpy(value, node->value);
+            if (calc_checksum(value) != node->checksum)
+               errx(1, "%s:%d wrong checksum", __FILE__, __LINE__);
+         } else {
+            strncpy(value, node->value, max_len - 1);
+            value[max_len - 1] = '\0';
+            if (calc_checksum(value) != node->checksum)
+               errx(1, "%s:%d wrong checksum", __FILE__, __LINE__);
+         }
+         found = true;
+         break;
+      }
+   }
 #endif
-    rd_unlock(&list->lock);
+   rd_unlock(&list->lock);
 
-    return found;
+   return found;
 }
 
 esw_node_t *esw_list_create_node(const char *const key, const char *const value)
 {
-    esw_node_t *node = (esw_node_t *)calloc(1, sizeof(esw_node_t));
-    node->key = strdup(key);
-    node->value = strdup(value);
-    node->checksum = calc_checksum(value);
+   esw_node_t *node = (esw_node_t *)calloc(1, sizeof(esw_node_t));
+   node->key = strdup(key);
+   node->value = strdup(value);
+   node->checksum = calc_checksum(value);
 
-    return node;
+   return node;
 }
 
 void esw_list_free_node(esw_node_t *node)
 {
-    free(node->key);
-    free(node->value);
-    free(node);
+   free(node->key);
+   free(node->value);
+   free(node);
 }
 
 void esw_list_free_content(LIST_TYPE *list)
 {
-#if defined (USE_MUTEX) || defined (USE_RWLOCK)
-    esw_node_t *current;
-    esw_node_t *tmp;
-    assert(list != NULL);
-    current = list->head;
-    while (current) {
-        tmp = current;
-        current = current->next;
-        esw_list_free_node(tmp);
-    }
-#elif defined (USE_RCU)
-    // TODO (not necessary)
+#if defined(USE_MUTEX) || defined(USE_RWLOCK)
+   esw_node_t *current;
+   esw_node_t *tmp;
+   assert(list != NULL);
+   current = list->head;
+   while (current) {
+      tmp = current;
+      current = current->next;
+      esw_list_free_node(tmp);
+   }
+#elif defined(USE_RCU)
+   struct cds_list_head *curr, *tmp;
+   cds_list_for_each_safe(curr, tmp, list)
+   {
+      esw_node_t *node = cds_list_entry(curr, esw_node_t, node);
+      cds_list_del(curr);
+      esw_list_free_node(node);
+   }
 #endif
 }
 
 void esw_list_free(LIST_TYPE *list)
 {
-    esw_list_free_content(list);
-    free(list);
+   esw_list_free_content(list);
+   free(list);
 }
diff --git a/list.hpp b/list.hpp
index 07831a4..fe8adef 100644
--- a/list.hpp
+++ b/list.hpp
@@ -4,51 +4,55 @@
 #include "definitions.hpp"
 #include <pthread.h>
 #ifdef USE_RCU
-#include <urcu-qsbr.h>		/* Userspace RCU flavor */
-#include <urcu/rculist.h>	/* RCU list */
-#include <urcu/compiler.h>	/* For CAA_ARRAY_SIZE */
+#include <urcu-qsbr.h>     /* Userspace RCU flavor */
+#include <urcu/compiler.h> /* For CAA_ARRAY_SIZE */
+#include <urcu/rculist.h>  /* RCU list */
 #endif
 
-#if defined (USE_MUTEX) || defined (USE_RWLOCK)
+#if defined(USE_MUTEX) || defined(USE_RWLOCK)
 #define LIST_TYPE esw_list_t
-#elif defined (USE_RCU)
+#elif defined(USE_RCU)
 #define LIST_TYPE struct cds_list_head
 #else
 #error "No lock type defined"
 #endif
 
 typedef struct esw_node {
-    char * key;
-    char * value;
-    unsigned checksum;
-#if defined (USE_MUTEX) || defined (USE_RWLOCK)
-    struct esw_node * next;
-    struct esw_node * prev;
-#elif defined (USE_RCU)
-    // TODO
+   char *key;
+   char *value;
+   unsigned checksum;
+#if defined(USE_MUTEX) || defined(USE_RWLOCK)
+   struct esw_node *next;
+   struct esw_node *prev;
+#elif defined(USE_RCU)
+   struct cds_list_head node;
 #else
 #error "No lock type defined"
 #endif
 } esw_node_t;
 
 typedef struct esw_list {
-    esw_node_t * head;
-#if defined (USE_MUTEX)
-    pthread_mutex_t lock;
-#elif defined (USE_RWLOCK)
-    pthread_rwlock_t lock;
+   esw_node_t *head;
+#if defined(USE_MUTEX)
+   pthread_mutex_t lock;
+#elif defined(USE_RWLOCK)
+   pthread_rwlock_t lock;
 #endif
 } esw_list_t;
 
-void esw_list_init(LIST_TYPE * list);
-void esw_list_push(LIST_TYPE * list, const char * const key, const char * const address);
-void esw_list_update(LIST_TYPE * list, const char * const key, const char * const address);
-bool esw_list_find(LIST_TYPE * list, const char * const key, char * address, const size_t max_len);
-esw_node_t * esw_list_create_node(const char * const key, const char * const address);
-void esw_list_free_node(esw_node_t * node);
-void esw_list_free_content(LIST_TYPE * list);
-void esw_list_free(LIST_TYPE * list);
-void esw_list_print(LIST_TYPE * list);
-void esw_list_node_print(esw_node_t * list);
+void esw_list_init(LIST_TYPE *list);
+void esw_list_push(LIST_TYPE *list, const char *const key,
+                   const char *const address);
+void esw_list_update(LIST_TYPE *list, const char *const key,
+                     const char *const address);
+bool esw_list_find(LIST_TYPE *list, const char *const key, char *address,
+                   const size_t max_len);
+esw_node_t *esw_list_create_node(const char *const key,
+                                 const char *const address);
+void esw_list_free_node(esw_node_t *node);
+void esw_list_free_content(LIST_TYPE *list);
+void esw_list_free(LIST_TYPE *list);
+void esw_list_print(LIST_TYPE *list);
+void esw_list_node_print(esw_node_t *list);
 
 #endif // LIST_H
diff --git a/main.cpp b/main.cpp
index 0120aa2..140bbdd 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,22 +1,22 @@
-#include "list.hpp"
 #include "definitions.hpp"
+#include "list.hpp"
+#include "signal.h"
+#include <algorithm>
+#include <array>
 #include <assert.h>
+#include <atomic>
+#include <chrono>
+#include <iostream>
 #include <math.h>
+#include <mutex>
+#include <ostream>
 #include <pthread.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <string>
 #include <unistd.h>
-#include <chrono>
-#include <algorithm>
-#include <mutex>
 #include <vector>
-#include <atomic>
-#include <string>
-#include <array>
-#include <iostream>
-#include <ostream>
-#include "signal.h"
 
 #if !defined(USE_MUTEX) && !defined(USE_RWLOCK) && !defined(USE_RCU)
 #error "Compile this with one of the USE_* defines!"
@@ -39,12 +39,12 @@ static LIST_TYPE list;
 atomic<bool> terminate_req = false;
 
 static __thread struct stats {
-    atomic<unsigned long> reads;
-    atomic<unsigned long> writes;
+   atomic<unsigned long> reads;
+   atomic<unsigned long> writes;
 } stats;
 
 mutex all_stats_mutex;
-vector<struct stats*> all_stats;
+vector<struct stats *> all_stats;
 
 static array<string, LIST_LENGTH> used_keys;
 
@@ -54,158 +54,156 @@ __thread unsigned int seed;
 
 void generate_random_string(char *str, size_t length)
 {
-    int len = strlen(charset);
-    for (size_t i = 0; i < length - 1; i++) {
-        int r = rand_r(&seed) % len;
-        str[i] = charset[r];
-    }
-    str[length - 1] = '\0';
+   int len = strlen(charset);
+   for (size_t i = 0; i < length - 1; i++) {
+      int r = rand_r(&seed) % len;
+      str[i] = charset[r];
+   }
+   str[length - 1] = '\0';
 }
 
 void init_list()
 {
-    char key[KEY_LEN + 1];
-    char value[VALUE_LEN + 1];
-    esw_list_init(&list);
-    for (auto &used_key: used_keys) {
-        generate_random_string(key, sizeof(key));
-        generate_random_string(value, sizeof(value));
-
-        esw_list_push(&list, key, value);
-        used_key = key;
-    }
+   char key[KEY_LEN + 1];
+   char value[VALUE_LEN + 1];
+   esw_list_init(&list);
+   for (auto &used_key : used_keys) {
+      generate_random_string(key, sizeof(key));
+      generate_random_string(value, sizeof(value));
+
+      esw_list_push(&list, key, value);
+      used_key = key;
+   }
 }
 
 void *reader_thread(void *arg)
 {
-    char key[KEY_LEN + 1];
-    char address[VALUE_LEN + 1];
-
-    {
-        // Store pointers to our per-thread statistics to the global variable
-        lock_guard<mutex> lock(all_stats_mutex);
-        all_stats.push_back(&stats);
-
-        // Initialize per-thread random seed from global RNG
-        seed = rand();
-    }
-
-    long hits = 0;
-    long miss = 0;
-
-    // TODO - RCU should have someting here
-
-    while (!terminate_req.load(relaxed)) {
-        generate_random_string(key, sizeof(key));
-
-        if (esw_list_find(&list, key, address, sizeof(address)) == true) {
-            hits++;
-        } else {
-            miss++;
-        }
-
-        // Update the per-thread counter safely but without an atomic
-        // instruction (note that no other thread modifies this)
-        stats.reads.store(stats.reads.load(relaxed) + 1, relaxed);
-    }
-    printf("Hits: %ld, Misses: %ld\n", hits, miss);
-    return NULL;
+   char key[KEY_LEN + 1];
+   char address[VALUE_LEN + 1];
+
+   {
+      // Store pointers to our per-thread statistics to the global variable
+      lock_guard<mutex> lock(all_stats_mutex);
+      all_stats.push_back(&stats);
+
+      // Initialize per-thread random seed from global RNG
+      seed = rand();
+   }
+
+   long hits = 0;
+   long miss = 0;
+
+   while (!terminate_req.load(relaxed)) {
+      generate_random_string(key, sizeof(key));
+#ifdef USE_RCU
+      rcu_register_thread();
+#endif
+      if (esw_list_find(&list, key, address, sizeof(address)) == true) {
+         hits++;
+      } else {
+         miss++;
+      }
+#ifdef USE_RCU
+      rcu_unregister_thread();
+#endif
+
+      // Update the per-thread counter safely but without an atomic
+      // instruction (note that no other thread modifies this)
+      stats.reads.store(stats.reads.load(relaxed) + 1, relaxed);
+   }
+   printf("Hits: %ld, Misses: %ld\n", hits, miss);
+   return NULL;
 }
 
 void *writer_thread(void *arg)
 {
-    {
-        // Store pointers to our per-thread statistics to the global variable
-        lock_guard<mutex> lock(all_stats_mutex);
-        all_stats.push_back(&stats);
-    }
-    while (!terminate_req.load(relaxed)) {
-        char new_value[VALUE_LEN + 1];
-        generate_random_string(new_value, sizeof(new_value));
-        esw_list_update(&list,
-                        used_keys[rand_r(&seed) % LIST_LENGTH].c_str(),
-                        new_value);
-
-        usleep(WRITE_PERIOD_US);
-
-        // Update the per-thread counter safely but without an atomic
-        // instruction (note that no other thread modifies this)
-        stats.writes.store(stats.writes.load(relaxed) + 1, relaxed);
-    }
-    return NULL;
+   {
+      // Store pointers to our per-thread statistics to the global variable
+      lock_guard<mutex> lock(all_stats_mutex);
+      all_stats.push_back(&stats);
+   }
+   while (!terminate_req.load(relaxed)) {
+      char new_value[VALUE_LEN + 1];
+      generate_random_string(new_value, sizeof(new_value));
+      esw_list_update(&list, used_keys[rand_r(&seed) % LIST_LENGTH].c_str(),
+                      new_value);
+
+      usleep(WRITE_PERIOD_US);
+
+      // Update the per-thread counter safely but without an atomic
+      // instruction (note that no other thread modifies this)
+      stats.writes.store(stats.writes.load(relaxed) + 1, relaxed);
+   }
+   return NULL;
 }
 
 void run_and_print_stats()
 {
-    long reads_local_last = 0;
-    long writes_local_last = 0;
-    sleep(1);
-    while (!terminate_req) {
-        long sum_reads = 0, sum_writes = 0;
-        {
-            lock_guard<mutex> lock(all_stats_mutex);
-            for (auto thr : all_stats) {
-                sum_reads += thr->reads.load(relaxed);
-                sum_writes += thr->writes.load(relaxed);
-            }
-        }
-        printf("Reads: %-10ld  Writes: %-10ld\n",
-               sum_reads - reads_local_last,
-               sum_writes - writes_local_last);
-        reads_local_last = sum_reads;
-        writes_local_last = sum_writes;
-        fflush(stdout);
-
-        sleep(1);
-    }
+   long reads_local_last = 0;
+   long writes_local_last = 0;
+   sleep(1);
+   while (!terminate_req) {
+      long sum_reads = 0, sum_writes = 0;
+      {
+         lock_guard<mutex> lock(all_stats_mutex);
+         for (auto thr : all_stats) {
+            sum_reads += thr->reads.load(relaxed);
+            sum_writes += thr->writes.load(relaxed);
+         }
+      }
+      printf("Reads: %-10ld  Writes: %-10ld\n", sum_reads - reads_local_last,
+             sum_writes - writes_local_last);
+      reads_local_last = sum_reads;
+      writes_local_last = sum_writes;
+      fflush(stdout);
+
+      sleep(1);
+   }
 }
 
-void sig_handler(int)
-{
-    terminate_req = true;
-}
+void sig_handler(int) { terminate_req = true; }
 
 int main(int argc, char *argv[])
 {
-    int reader_count;
+   int reader_count;
 
-    if (argc != 2)
-        errx(EXIT_FAILURE, "usage: %s <reader-thread quantity>", argv[0]);
+   if (argc != 2)
+      errx(EXIT_FAILURE, "usage: %s <reader-thread quantity>", argv[0]);
 
-    reader_count = atoi(argv[1]);
+   reader_count = atoi(argv[1]);
 
-    if (reader_count < 1 || reader_count > 100)
-        errx(EXIT_FAILURE, "min readers: 1, max readers: 100");
+   if (reader_count < 1 || reader_count > 100)
+      errx(EXIT_FAILURE, "min readers: 1, max readers: 100");
 
-    printf("Size of one list element: %zu\n", sizeof(struct esw_node));
+   printf("Size of one list element: %zu\n", sizeof(struct esw_node));
 
-    init_list();
+   init_list();
 
-    signal(SIGINT, sig_handler);
-    signal(SIGTERM, sig_handler);
+   signal(SIGINT, sig_handler);
+   signal(SIGTERM, sig_handler);
 
-    vector<pthread_t> readers(reader_count);
-    vector<pthread_t> writers(WRITERS_COUNT);
+   vector<pthread_t> readers(reader_count);
+   vector<pthread_t> writers(WRITERS_COUNT);
 
-    for (int i = 0; i < reader_count; i++)
-        if (pthread_create(&readers[i], NULL, reader_thread, NULL) != 0)
-            err(1, "pthread_create reader");
+   for (int i = 0; i < reader_count; i++)
+      if (pthread_create(&readers[i], NULL, reader_thread, NULL) != 0)
+         err(1, "pthread_create reader");
 
-    for (int i = 0; i < WRITERS_COUNT; i++)
-        if (pthread_create(&writers[i], NULL, writer_thread, NULL) != 0)
-            err(1, "pthread_create writer");
+   for (int i = 0; i < WRITERS_COUNT; i++)
+      if (pthread_create(&writers[i], NULL, writer_thread, NULL) != 0)
+         err(1, "pthread_create writer");
 
-    run_and_print_stats();
+   run_and_print_stats();
 
-    terminate_req = true;
+   terminate_req = true;
 
-    for (int i = 0; i < WRITERS_COUNT; i++)
-        pthread_join(writers[i], NULL);
+   for (int i = 0; i < WRITERS_COUNT; i++)
+      pthread_join(writers[i], NULL);
 
-    for (int i = 0; i < reader_count; i++)
-        pthread_join(readers[i], NULL);
+   for (int i = 0; i < reader_count; i++)
+      pthread_join(readers[i], NULL);
 
-    esw_list_free_content(&list);
+   esw_list_free_content(&list);
 
-    return EXIT_SUCCESS;
+   return EXIT_SUCCESS;
 }
